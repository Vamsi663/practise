@Component(service = Servlet.class,
    property = {
        "sling.servlet.methods=GET",
        "sling.servlet.resourceTypes=bcuspublic/components/page/deposit-page",
        "sling.servlet.selectors=deposits",
        "sling.servlet.extensions=json"
    }
)
public class FetchRatesServlet extends SlingSafeMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(FetchRatesServlet.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws ServletException, IOException {

        String[] selectors = request.getRequestPathInfo().getSelectors();

        if (selectors.length < 2) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Missing offerInstanceId selector\"}");
            return;
        }

        String offerInstanceId = selectors[1]; // selector[0] = "deposits", selector[1] = offerInstanceId

        String basePath = "/content/bcuspublic/data/savings/deposits/productRates";
        ResourceResolver resolver = request.getResourceResolver();

        try {
            Resource productRatesRoot = resolver.getResource(basePath);
            if (productRatesRoot == null) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            for (Resource productRateNode : productRatesRoot.getChildren()) {
                ValueMap props = productRateNode.getValueMap();
                if (offerInstanceId.equals(props.get("offerInstanceId", String.class))) {
                    Resource ratesNode = productRateNode.getChild("rates");
                    if (ratesNode != null) {
                        List<Map<String, Object>> rates = new ArrayList<>();
                        for (Resource item : ratesNode.getChildren()) {
                            Map<String, Object> rateMap = new HashMap<>(item.getValueMap());
                            rates.add(rateMap);
                        }
                        response.setContentType("application/json");
                        response.getWriter().write(new ObjectMapper().writeValueAsString(rates));
                        return;
                    }
                }
            }

            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"No rates found\"}");

        } catch (Exception e) {
            LOG.error("Failed to fetch rates for offerInstanceId={}", offerInstanceId, e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal error\"}");
        }
    }
}
