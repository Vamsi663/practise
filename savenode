public class Rate {
    private Double interestRate;
    private Double annualYield;
    private Double minimumBalance;
    private Double maximumBalance;
    private Integer termsInMonths;
    private String tierName;
    private String effectiveDate;
    // Getters and setters
}

public class ProductMapping {
    private String subProductType;
    private List<Rate> rates;
    // Getters and setters
}

public class PartnerProductMapping {
    private String brand;
    private List<ProductMapping> productMappings;
    // Getters and setters
}

public class Data {
    private String productType;
    private List<PartnerProductMapping> partnerProductMappings;
    // Getters and setters
}

public class Meta {
    private String lastSyncTimestamp;
    private boolean isStale;
    private String correlationId;
    private Data data;
    // Getters and setters
}

@SlingServletPaths("/bin/store/json-to-jcr")
@Service(Servlet.class)
public class StoreJsonServlet extends SlingAllMethodsServlet {

    @Reference
    private ResourceResolverFactory resolverFactory;

    private static final Logger log = LoggerFactory.getLogger(StoreJsonServlet.class);

    @Override
    protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws ServletException, IOException {

        ObjectMapper mapper = new ObjectMapper();
        String trackingId = UUID.randomUUID().toString();

        try {
            // Parse only the "data" node from the JSON
            JsonNode rootNode = mapper.readTree(request.getInputStream());
            JsonNode dataNode = rootNode.get("data");
            Data data = mapper.treeToValue(dataNode, Data.class);

            Map<String, Object> param = Map.of(ResourceResolverFactory.SUBSERVICE, "datawriter");

            try (ResourceResolver resolver = resolverFactory.getServiceResourceResolver(param)) {
                Session session = resolver.adaptTo(Session.class);
                Node baseNode = JcrUtil.createPath("/content/productdata", "nt:unstructured", session);

                Node dataJcrNode = JcrUtil.createPath(baseNode.getPath() + "/data", "nt:unstructured", session);
                setProperty(dataJcrNode, "productType", data.getProductType());

                data.getPartnerProductMappings().forEach(partner -> {
                    try {
                        Node partnerNode = dataJcrNode.addNode(partner.getBrand(), "nt:unstructured");

                        partner.getProductMappings().forEach(productMapping -> {
                            try {
                                Node subProductNode = partnerNode.addNode(productMapping.getSubProductType(), "nt:unstructured");

                                AtomicInteger counter = new AtomicInteger(0);
                                productMapping.getRates().forEach(rate -> {
                                    try {
                                        Node rateNode = subProductNode.addNode("rate" + counter.getAndIncrement(), "nt:unstructured");

                                        setProperty(rateNode, "interestRate", rate.getInterestRate());
                                        setProperty(rateNode, "annualYield", rate.getAnnualYield());
                                        setProperty(rateNode, "minimumBalance", rate.getMinimumBalance());
                                        setProperty(rateNode, "maximumBalance", rate.getMaximumBalance());
                                        setProperty(rateNode, "termsInMonths", rate.getTermsInMonths());
                                        setProperty(rateNode, "tierName", rate.getTierName());
                                        setProperty(rateNode, "effectiveDate", rate.getEffectiveDate());

                                    } catch (RepositoryException e) {
                                        log.error("Error creating rate node", e);
                                    }
                                });

                            } catch (RepositoryException e) {
                                log.error("Error creating subProduct node", e);
                            }
                        });

                    } catch (RepositoryException e) {
                        log.error("Error creating partner node", e);
                    }
                });

                session.save();

                // Send success response
                ObjectNode responseJson = mapper.createObjectNode();
                ObjectNode dataResponse = responseJson.putObject("data");
                dataResponse.put("status", "ACCEPTED");
                dataResponse.put("trackingId", trackingId);
                dataResponse.put("message", "success");

                response.setContentType("application/json");
                response.setStatus(HttpServletResponse.SC_OK);
                mapper.writeValue(response.getWriter(), responseJson);
            }

        } catch (Exception e) {
            log.error("Error storing data", e);
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);

            ObjectMapper errorMapper = new ObjectMapper();
            ObjectNode errorJson = errorMapper.createObjectNode();
            ObjectNode errorData = errorJson.putObject("data");
            errorData.put("status", "FAILED");
            errorData.put("trackingId", trackingId);
            errorData.put("message", e.getMessage());

            response.setContentType("application/json");
            errorMapper.writeValue(response.getWriter(), errorJson);
        }
    }

    // âœ… Simplified setProperty for string fields
    private void setProperty(Node node, String name, String value) {
        try {
            if (value != null) {
                node.setProperty(name, value);
            }
        } catch (RepositoryException e) {
            log.error("Error setting property: " + name, e);
        }
    }
}
