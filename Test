// at the top of the test, before execute
Resource pageRes = Mockito.mock(Resource.class);
Resource contentRes = Mockito.mock(Resource.class);
Page page = Mockito.mock(Page.class);
Node pageContentNode = Mockito.mock(Node.class);

Mockito.when(resourceResolver.getResource(Mockito.anyString()))
       .thenReturn(pageRes, contentRes);         // first for Page, second for Node
Mockito.when(pageRes.adaptTo(Page.class)).thenReturn(page);
Mockito.when(contentRes.adaptTo(Node.class)).thenReturn(pageContentNode);
Mockito.when(page.getPath()).thenReturn(CONTENT_PATH);

// use the correct association type
final String ASSOC = "SECONDARY_INC_ASSOCIATE";

// --- First call: cover IF branch (empty multiple values)
Property offerProp = Mockito.mock(Property.class);
Mockito.when(pageContentNode.hasProperty(OFFERIDS)).thenReturn(true);
Mockito.when(pageContentNode.getProperty(OFFERIDS)).thenReturn(offerProp);
Mockito.when(offerProp.isMultiple()).thenReturn(true);
Mockito.when(offerProp.getValues()).thenReturn(new javax.jcr.Value[]{}); // empty â†’ skip loop
Mockito.when(page.listChildren(Mockito.any(com.day.cq.wcm.api.PageFilter.class)))
       .thenReturn(null);

List<TreeViewNode> list1 =
    associateOfferToPageSupport.fetchLandingPagesWithOfferIds(resourceResolver, secondaryOfferIds, ASSOC);
assertFalse(list1.isEmpty());

// --- Second call: cover ELSE branch (no OFFERIDS)
Mockito.when(pageContentNode.hasProperty(OFFERIDS)).thenReturn(false);
Mockito.when(resourceResolver.getResource(Mockito.anyString()))
       .thenReturn(pageRes, contentRes);

List<TreeViewNode> list2 =
    associateOfferToPageSupport.fetchLandingPagesWithOfferIds(resourceResolver, secondaryOfferIds, ASSOC);
assertFalse(list2.isEmpty());
