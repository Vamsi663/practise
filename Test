@Test
public void test_fetchXFPages_addsOneChild() throws Exception {
    // SUT as spy so we can stub its internals safely
    AssociateOfferToPageSupport spy = Mockito.spy(associateOfferToPageSupport);

    String xfPath = "/content/experience-fragments/site/en";
    Resource xfRoot = Mockito.mock(Resource.class);
    Resource child = Mockito.mock(Resource.class);
    ValueMap childVm = Mockito.mock(ValueMap.class);

    // fetch root
    Mockito.when(resourceResolver.getResource(xfPath)).thenReturn(xfRoot);
    // iterate one child
    Mockito.when(xfRoot.getChildren()).thenReturn(java.util.Collections.singletonList(child));
    // make it a “page-like” resource so the first branch executes
    Mockito.when(child.getValueMap()).thenReturn(childVm);
    Mockito.when(childVm.get("jcr:primaryType", "")).thenReturn("cq:Page");

    // short-circuit internals the method calls
    Mockito.doReturn(java.util.Collections.emptyList()).when(spy).getRunningWorkflows();
    Mockito.doReturn(new TreeViewNode()).when(spy)
        .buildTreeViewNodeFromXFPage(Mockito.eq(child), Mockito.isNull(), Mockito.anyList());

    java.util.List<TreeViewNode> out = spy.fetchXFPages(resourceResolver, xfPath);

    org.junit.Assert.assertEquals(1, out.size());
}
