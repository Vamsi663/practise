@Test
public void test_storeRates_save() throws Exception {
    // Arrange
    StoreRatesRequest request = mockRequest();
    request.getData().getProductRates().get(0).setOfferInstanceId("new-offer-instance-id");
    request.getData().getProductRates().get(0).setProductName("Dummy product");

    Rates rates = new Rates();
    rates.set("dummyKey", "dummyValue");
    request.getData().getProductRates().get(0).setRates(Collections.singletonList(rates));

    StoreRatesServiceImpl storeRatesService = new StoreRatesServiceImpl();

    Session mockSession = Mockito.mock(Session.class);
    Node mockRootNode = Mockito.mock(Node.class);
    Node mockOfferInstanceNode = Mockito.mock(Node.class);
    Node mockRatesNode = Mockito.mock(Node.class);
    Node mockItemNode = Mockito.mock(Node.class);

    // Mock session -> root node
    Mockito.when(mockSession.getRootNode()).thenReturn(mockRootNode);

    // Mock root node -> offerInstances -> offerInstanceNode
    Mockito.when(mockRootNode.hasNode("content/bcuspublic/data/deposits/offerinstances"))
           .thenReturn(true);
    Mockito.when(mockRootNode.getNode("content/bcuspublic/data/deposits/offerinstances"))
           .thenReturn(mockOfferInstanceNode);

    Mockito.when(mockOfferInstanceNode.hasNode("new-offer-instance-id"))
           .thenReturn(false);
    Mockito.when(mockOfferInstanceNode.addNode("new-offer-instance-id"))
           .thenReturn(mockOfferInstanceNode);

    Mockito.when(mockOfferInstanceNode.hasNode("rates"))
           .thenReturn(false);
    Mockito.when(mockOfferInstanceNode.addNode("rates"))
           .thenReturn(mockRatesNode);

    Mockito.when(mockRatesNode.addNode("item0")).thenReturn(mockItemNode);

    // Make session.save() throw exception
    Mockito.doThrow(new RepositoryException("Simulated RepositoryException"))
           .when(mockSession).save();

    // Mock resource resolver + session
    Mockito.when(resourceResolvers.getResourceResolver(SubService.WRITE_CONTENT))
           .thenReturn(resourceResolver);
    Mockito.when(resourceResolver.adaptTo(Session.class))
           .thenReturn(mockSession);

    // Act
    storeRatesService.storeRates(request, resourceResolvers);

    // Assert
    // No need to assert, this test is only to reach RepositoryException branch
}
