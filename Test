@Test
public void test_storeRates_save_repositoryException() throws Exception {
    StoreRatesRequest request = mockNullRequest(); // now has full data

    StoreRatesServiceImpl storeRatesService1 = new StoreRatesServiceImpl();
    Session mockSession = Mockito.mock(Session.class);

    Mockito.doThrow(new RepositoryException("Simulated RepositoryException")).when(mockSession).save();

    Mockito.when(resourceResolvers.getResourceResolver(SubService.WRITE_CONTENT)).thenReturn(resourceResolver);
    Mockito.when(resourceResolver.adaptTo(Session.class)).thenReturn(mockSession);

    storeRatesService1.storeRates(request, resourceResolvers);

    // No exception thrown = test passes
}



private StoreRatesRequest mockNullRequest() throws IOException {
    StoreRatesRequest storeRatesRequest = new StoreRatesRequest();
    Data data = new Data();

    ProductRates productRates = new ProductRates();
    productRates.setOfferInstanceId("new-offer-instance-id");
    productRates.setOfferProductId("a1b2c3d4-e5f6-7890-abcd-ef1234567892");
    productRates.setProductName("Dummy Product"); // ✅ not null

    Rates rates = new Rates();
    rates.set("dummeyKey", "dummeyValue"); // ✅ valid value
    productRates.setRates(Collections.singletonList(rates)); // ✅ not null

    data.setProductRates(Collections.singletonList(productRates));
    storeRatesRequest.setData(data);
    return storeRatesRequest;
}
