@Test
public void test_fetchLandingPagesWithOfferIds_NoOfferIds_returnsNode() throws Exception {
    List<String> secondaryOfferIds = java.util.Arrays.asList("someId");

    Page page = Mockito.mock(Page.class);
    Resource pageRes = Mockito.mock(Resource.class);
    Resource contentRes = Mockito.mock(Resource.class);
    Node node = Mockito.mock(Node.class);

    // Resolver calls: first to CONTENT_PATH → Page, then pagePath + "/jcr:content" → Node
    Mockito.when(resourceResolver.getResource(Mockito.anyString()))
           .thenReturn(pageRes, contentRes);
    Mockito.when(pageRes.adaptTo(Page.class)).thenReturn(page);
    Mockito.when(contentRes.adaptTo(Node.class)).thenReturn(node);

    Mockito.when(page.getPath()).thenReturn("/content/test");

    // Force ELSE branch
    Mockito.when(node.hasProperty("OFFERIDS")).thenReturn(false);

    // Don’t traverse children
    Mockito.when(page.listChildren(Mockito.any(com.day.cq.wcm.api.PageFilter.class)))
           .thenReturn(null);

    List<TreeViewNode> result =
        associateOfferToPageSupport.fetchLandingPagesWithOfferIds(
            resourceResolver, secondaryOfferIds, "SECONDARY_INC_ASSOCIATE");

    org.junit.Assert.assertFalse(result.isEmpty());
}
