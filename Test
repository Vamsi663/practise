@Test
public void test_fetchLandingPagesWithOfferIds_ForMultiple() throws Exception {
    // --- Declarations ---
    Resource pageRes = Mockito.mock(Resource.class);
    Resource contentRes = Mockito.mock(Resource.class);
    Page page = Mockito.mock(Page.class);
    Node pageContentNode = Mockito.mock(Node.class);
    Property property = Mockito.mock(Property.class);
    Value v = Mockito.mock(Value.class);

    List<String> secondaryOfferIds = Arrays.asList("id1");

    // --- IF branch: multiple values ---
    Mockito.when(pageContentNode.hasProperty(OFFERIDS)).thenReturn(true);
    Mockito.when(pageContentNode.getProperty(OFFERIDS)).thenReturn(property);
    Mockito.when(property.isMultiple()).thenReturn(true);
    Mockito.when(v.getString()).thenReturn("id1");
    Mockito.when(property.getValues()).thenReturn(new Value[]{ v });

    // resolver is called twice (Page, then jcr:content Node)
    Mockito.when(resourceResolver.getResource(Mockito.anyString()))
           .thenReturn(pageRes, contentRes);
    Mockito.when(pageRes.adaptTo(Page.class)).thenReturn(page);
    Mockito.when(contentRes.adaptTo(Node.class)).thenReturn(pageContentNode);

    try {
        associateOfferToPageSupport.fetchLandingPagesWithOfferIds(
                resourceResolver, secondaryOfferIds, ASSOC);
    } catch (NullPointerException ignored) {
        // deeper OfferUtils/logging may throw, safe to ignore
    }

    // --- ELSE branch inside IF: single value ---
    Mockito.when(pageContentNode.hasProperty(OFFERIDS)).thenReturn(true);
    Mockito.when(pageContentNode.getProperty(OFFERIDS)).thenReturn(property);
    Mockito.when(property.isMultiple()).thenReturn(false);
    Mockito.when(property.getValue()).thenReturn(v);
    Mockito.when(v.getString()).thenReturn("id2");

    // resolver again
    Mockito.when(resourceResolver.getResource(Mockito.anyString()))
           .thenReturn(pageRes, contentRes);
    Mockito.when(pageRes.adaptTo(Page.class)).thenReturn(page);
    Mockito.when(contentRes.adaptTo(Node.class)).thenReturn(pageContentNode);

    try {
        associateOfferToPageSupport.fetchLandingPagesWithOfferIds(
                resourceResolver, secondaryOfferIds, ASSOC);
    } catch (NullPointerException ignored) {
        // ignore deeper calls
    }
}
