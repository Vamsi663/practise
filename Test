@Test
public void getContentInfoTestAsset() throws Exception {
    ContentFragmentServlet servlet = new ContentFragmentServlet();

    // Mock an asset-type resource
    Resource assetResource = mock(Resource.class);
    Node assetNode = mock(Node.class);

    when(assetResource.getResourceType()).thenReturn("dam:Asset");
    when(assetResource.getPath()).thenReturn("/content/bcuspublic/cf-folder");
    when(assetResource.adaptTo(Node.class)).thenReturn(assetNode);
    when(assetNode.isNodeType("dam:Asset")).thenReturn(true);

    // Mock the ContentFragment adaptation and its behavior
    com.adobe.cq.dam.cfm.ContentFragment mockCF = mock(com.adobe.cq.dam.cfm.ContentFragment.class);
    when(assetResource.adaptTo(com.adobe.cq.dam.cfm.ContentFragment.class)).thenReturn(mockCF);
    when(mockCF.getElement("disclosure-1")).thenReturn(mock(com.adobe.cq.dam.cfm.ContentElement.class));

    // Mock ValueMap
    ValueMap valueMap = new ValueMapDecorator(new HashMap<>());
    when(assetResource.getValueMap()).thenReturn(valueMap);

    // parentJson to hold output
    Map<String, Object> parentJson = new HashMap<>();

    // Call private method via reflection
    Method m = ContentFragmentServlet.class.getDeclaredMethod(
            "getContentInfo",
            ResourceResolver.class, Resource.class, Map.class, String.class
    );
    m.setAccessible(true);
    m.invoke(servlet, resourceResolver, assetResource, parentJson, "data");

    // Assert output key created
    assertTrue(parentJson.containsKey("data"));
}
