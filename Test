@Test
public void test_storeRates_save_repositoryException() throws Exception {
    StoreRatesRequest request = mockNullRequest();
    
    // üîç Confirm data is actually set ‚Äî debug or log here
    System.out.println("DEBUG request = " + request);
    System.out.println("DEBUG data = " + request.getData());
    System.out.println("DEBUG productRates = " + request.getData().getProductRates());

    StoreRatesServiceImpl storeRatesService1 = new StoreRatesServiceImpl();
    Session mockSession = Mockito.mock(Session.class);

    Mockito.doThrow(new RepositoryException("Simulated RepositoryException")).when(mockSession).save();
    Mockito.when(resourceResolvers.getResourceResolver(SubService.WRITE_CONTENT)).thenReturn(resourceResolver);
    Mockito.when(resourceResolver.adaptTo(Session.class)).thenReturn(mockSession);

    storeRatesService1.storeRates(request, resourceResolvers);
}


@Test
public void test_storeRates_save_repositoryException() throws Exception {
    StoreRatesRequest request = new StoreRatesRequest();
    Data data = new Data();
    ProductRates productRates = new ProductRates();
    productRates.setOfferInstanceId("new-offer-instance-id");
    productRates.setOfferProductId("a1b2c3d4-e5f6-7890-abcd-ef1234567892");
    productRates.setProductName("Dummy Product");

    Rates rates = new Rates();
    rates.set("dummyKey", "dummyValue");
    productRates.setRates(Collections.singletonList(rates));

    data.setProductRates(Collections.singletonList(productRates));
    request.setData(data);

    StoreRatesServiceImpl storeRatesService1 = new StoreRatesServiceImpl();
    Session mockSession = Mockito.mock(Session.class);

    Mockito.doThrow(new RepositoryException("Simulated RepositoryException")).when(mockSession).save();
    Mockito.when(resourceResolvers.getResourceResolver(SubService.WRITE_CONTENT)).thenReturn(resourceResolver);
    Mockito.when(resourceResolver.adaptTo(Session.class)).thenReturn(mockSession);

    storeRatesService1.storeRates(request, resourceResolvers);
}
