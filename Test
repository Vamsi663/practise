@Test
public void getContentInfo_folderWithNoDamChildren_putsEmptyList() throws Exception {
    // Arrange
    ContentFragmentServlet servlet = new ContentFragmentServlet(); // use your @InjectMocks if you prefer

    // fragmentResource: sling:Folder
    Resource folder = mock(Resource.class);
    when(folder.getResourceType()).thenReturn("sling:Folder");
    when(folder.getPath()).thenReturn("/content/bcuspublic/cf-folder");

    // children: NOT dam:Asset -> buildFragmentJson() will not be called
    Resource childA = mock(Resource.class);
    Resource childB = mock(Resource.class);

    javax.jcr.Node childANode = mock(javax.jcr.Node.class);
    javax.jcr.Node childBNode = mock(javax.jcr.Node.class);

    when(childA.adaptTo(javax.jcr.Node.class)).thenReturn(childANode);
    when(childB.adaptTo(javax.jcr.Node.class)).thenReturn(childBNode);

    when(childANode.isNodeType("dam:Asset")).thenReturn(false);
    when(childBNode.isNodeType("dam:Asset")).thenReturn(false);

    when(folder.getChildren()).thenReturn(java.util.Arrays.asList(childA, childB));

    // parent json holder
    java.util.Map<String,Object> parentJson = new java.util.HashMap<>();

    // Act: invoke private method via reflection (no runner changes needed)
    java.lang.reflect.Method m = ContentFragmentServlet.class.getDeclaredMethod(
            "getContentInfo",
            org.apache.sling.api.resource.ResourceResolver.class,
            org.apache.sling.api.resource.Resource.class,
            java.util.Map.class,
            java.lang.String.class
    );
    m.setAccessible(true);
    m.invoke(servlet, resourceResolver, folder, parentJson, "data");

    // Assert: key exists and is an empty List (since no dam:Asset children)
    org.junit.Assert.assertTrue("parentJson should contain key 'data'", parentJson.containsKey("data"));
    Object val = parentJson.get("data");
    org.junit.Assert.assertTrue("value under 'data' must be a List", val instanceof java.util.List);
    org.junit.Assert.assertTrue("list must be empty when no DAM children",
            ((java.util.List<?>) val).isEmpty());
}
