@Test
public void test_storeRates_save_repositoryException() throws Exception {
    // Prepare mock request
    StoreRatesRequest request = mockRequest();
    request.getData().getProductRates().get(0).setOfferInstanceId("new-offer-instance-id");
    request.getData().getProductRates().get(0).setProductName("Dummy product");
    request.getData().getProductRates().get(0).getRates().get(0).set("dummyKey", "dummyValue");

    // Create service under test
    StoreRatesServiceImpl storeRatesService1 = new StoreRatesServiceImpl();

    // Mock session
    Session mockSession = Mockito.mock(Session.class);
    Mockito.doThrow(new RepositoryException("Simulated RepositoryException"))
           .when(mockSession).save();

    // Mock node and resource resolver behavior
    Node mockNode = Mockito.mock(Node.class);
    ResourceResolver mockResolver = Mockito.mock(ResourceResolver.class);
    Mockito.when(mockResolver.adaptTo(Session.class)).thenReturn(mockSession);
    Mockito.when(resourceResolvers.getResourceResolver(SubService.WRITE_CONTENT)).thenReturn(mockResolver);
    Mockito.when(mockResolver.getResource(Mockito.anyString())).thenReturn(Mockito.mock(Resource.class));
    Mockito.when(mockNode.addNode(Mockito.anyString())).thenReturn(mockNode);
    Mockito.when(mockNode.setProperty(Mockito.anyString(), Mockito.anyString())).thenReturn(null);

    // Mock context node structure to avoid NPE
    Node offerInstancesNode = Mockito.mock(Node.class);
    Mockito.when(mockNode.hasNode("new-offer-instance-id")).thenReturn(false);
    Mockito.when(mockNode.getNode("new-offer-instance-id")).thenReturn(mockNode);
    Mockito.when(offerInstancesNode.hasNode(Mockito.anyString())).thenReturn(false);
    Mockito.when(mockSession.getRootNode()).thenReturn(mockNode);

    // Inject mocked session into resolver
    storeRatesService1.storeRates(request, resourceResolvers);

    // If the RepositoryException occurs, you should see it logged
    // and test passes if it doesn't crash
}
