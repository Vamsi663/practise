@Test
public void test_fetchXFPages_nullRoot_returnsEmpty() throws Exception {
    AssociateOfferToPageSupport sut = new AssociateOfferToPageSupport();

    // xfPath root not found â†’ early return
    Mockito.when(resourceResolver.getResource("/xf/missing")).thenReturn(null);

    List<TreeViewNode> out = sut.fetchXFPages(resourceResolver, "/xf/missing");
    org.junit.Assert.assertTrue(out.isEmpty());
}

@Test
public void test_fetchXFPages_childPage_branch_executesLoop() throws Exception {
    AssociateOfferToPageSupport sut = new AssociateOfferToPageSupport();

    // Mocks
    String xfPath = "/xf/path";
    Resource xfRoot = Mockito.mock(Resource.class);
    Resource child = Mockito.mock(Resource.class);
    ValueMap childVm = Mockito.mock(ValueMap.class);

    // Root + one child
    Mockito.when(resourceResolver.getResource(xfPath)).thenReturn(xfRoot);
    Mockito.when(xfRoot.getChildren()).thenReturn(java.util.Collections.singletonList(child));

    // Make child look like a cq:Page so the first branch runs
    Mockito.when(child.getValueMap()).thenReturn(childVm);
    Mockito.when(childVm.get("jcr:primaryType", "")).thenReturn("cq:Page");

    // Run and EXPECT an NPE from deeper private calls (ok for coverage of lines before it)
    try {
        sut.fetchXFPages(resourceResolver, xfPath);
        org.junit.Assert.fail("Expected NPE after loop/branch executed");
    } catch (NullPointerException expected) {
        // Lines inside the loop and the 'cq:Page' branch are executed before this point.
    }
}
