// ---- 1) Null-root path: covers early return (xfPathRoot == null) ----
@Test
public void test_fetchXFPages_nullRoot_returnsEmpty() throws Exception {
    // use your existing instance; or: AssociateOfferToPageSupport sut = new AssociateOfferToPageSupport();
    AssociateOfferToPageSupport sut = associateOfferToPageSupport;

    Mockito.when(resourceResolver.getResource("/xf/missing")).thenReturn(null);

    List<TreeViewNode> out = sut.fetchXFPages(resourceResolver, "/xf/missing");
    org.junit.Assert.assertTrue(out.isEmpty());
}

// ---- 2) First branch: child treated as folder (sling:OrderedFolder / nt:folder) ----
@Test
public void test_fetchXFPages_child_isFolderBranch() throws Exception {
    AssociateOfferToPageSupport sut = associateOfferToPageSupport;

    Resource xfRoot = Mockito.mock(Resource.class);
    Resource child  = Mockito.mock(Resource.class);
    org.apache.sling.api.resource.ValueMap vm = Mockito.mock(org.apache.sling.api.resource.ValueMap.class);

    Mockito.when(resourceResolver.getResource("/xf/folder")).thenReturn(xfRoot);
    Mockito.when(xfRoot.getChildren()).thenReturn(java.util.Collections.singletonList(child));
    Mockito.when(child.getValueMap()).thenReturn(vm);

    // Make first IF true: valueMap.get("jcr:primaryType").toString().equalsIgnoreCase("sling:OrderedFolder")
    Mockito.when(vm.get("jcr:primaryType")).thenReturn("sling:OrderedFolder");
    // (the method also queries get("jcr:primaryType", ""), but the above is enough to enter this block)

    try {
        List<TreeViewNode> out = sut.fetchXFPages(resourceResolver, "/xf/folder");
        // If no exception, we at least added one element (could be null depending on private call)
        org.junit.Assert.assertEquals(1, out.size());
    } catch (NullPointerException expected) {
        // OK: lines in the branch executed before a private helper threw
    }
}

// ---- 3) Else-if branch: cq:Page + MASTER/jcr:content/cq:template ----
@Test
public void test_fetchXFPages_child_pageWithMasterTemplateBranch() throws Exception {
    AssociateOfferToPageSupport sut = associateOfferToPageSupport;

    Resource xfRoot = Mockito.mock(Resource.class);
    Resource child  = Mockito.mock(Resource.class);
    Resource master = Mockito.mock(Resource.class);
    Resource jcrContent = Mockito.mock(Resource.class);

    org.apache.sling.api.resource.ValueMap childVm = Mockito.mock(org.apache.sling.api.resource.ValueMap.class);
    org.apache.sling.api.resource.ValueMap pageVm  = Mockito.mock(org.apache.sling.api.resource.ValueMap.class);

    Mockito.when(resourceResolver.getResource("/xf/template")).thenReturn(xfRoot);
    Mockito.when(xfRoot.getChildren()).thenReturn(java.util.Collections.singletonList(child));

    // Ensure first IF (folder) is false; else-if checks cq:Page via get("jcr:primaryType","")
    Mockito.when(child.getValueMap()).thenReturn(childVm);
    Mockito.when(childVm.get("jcr:primaryType")).thenReturn("something-else"); // so folder IF wonâ€™t short-circuit
    Mockito.when(childVm.get("jcr:primaryType", "")).thenReturn("cq:Page");

    // MASTER/jcr:content with a template value matching the constant in code
    Mockito.when(child.getChild("MASTER")).thenReturn(master);
    Mockito.when(master.getChild("jcr:content")).thenReturn(jcrContent);
    Mockito.when(jcrContent.getValueMap()).thenReturn(pageVm);

    // Use your real constant if public; otherwise keep the literal you compare against
    final String LANDING_PAGE_XF_TEMPLATE = "landing-page-xf-template";
    Mockito.when(pageVm.get("cq:template", "")).thenReturn(LANDING_PAGE_XF_TEMPLATE);

    try {
        List<TreeViewNode> out = sut.fetchXFPages(resourceResolver, "/xf/template");
        org.junit.Assert.assertEquals(1, out.size());
    } catch (NullPointerException expected) {
        // OK: branch lines executed before private helper threw
    }
}

